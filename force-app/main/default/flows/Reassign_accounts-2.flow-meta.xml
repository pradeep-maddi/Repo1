<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>Email notification to the new owners of hot, warm, and cold accounts</description>
        <name>Send_New_Account_Notification</name>
        <label>Send New Account Notification</label>
        <locationX>182</locationX>
        <locationY>397</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>NewAccountEmail</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <stringValue>{!User2.Email}, {!User3.Email}</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>New Account Assignments</stringValue>
            </value>
        </inputParameters>
    </actionCalls>
    <assignments>
        <name>Add_Values_to_Updated_Collection</name>
        <label>Add Values to Updated Collection</label>
        <locationX>788</locationX>
        <locationY>181</locationY>
        <assignmentItems>
            <assignToReference>coll_updatedAccts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>accountLoopVar</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <name>Assign_to_User_2</name>
        <label>Assign to User 2</label>
        <locationX>756</locationX>
        <locationY>344</locationY>
        <assignmentItems>
            <assignToReference>accountLoopVar.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>User2.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Add_Values_to_Updated_Collection</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_to_User_3</name>
        <label>Assign to User 3</label>
        <locationX>636</locationX>
        <locationY>173</locationY>
        <assignmentItems>
            <assignToReference>accountLoopVar.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>User3.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Add_Values_to_Updated_Collection</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>What_s_the_Account_Rating</name>
        <label>What’s the Account Rating?</label>
        <locationX>628</locationX>
        <locationY>347</locationY>
        <defaultConnector>
            <targetReference>Assign_to_User_3</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Warm or Cold</defaultConnectorLabel>
        <rules>
            <name>Hot</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>accountLoopVar.Rating</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Hot</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_to_User_2</targetReference>
            </connector>
            <label>Hot</label>
        </rules>
    </decisions>
    <description>Transfer ownership of accounts when a user leaves their role</description>
    <interviewLabel>Reassign accounts {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Reassign accounts</label>
    <loops>
        <name>Reassign_Accounts</name>
        <label>Reassign Accounts</label>
        <locationX>492</locationX>
        <locationY>338</locationY>
        <assignNextValueToReference>accountLoopVar</assignNextValueToReference>
        <collectionReference>User1_Accounts</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>What_s_the_Account_Rating</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>update_Accounts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <name>Find_User_1_s_Accounts</name>
        <label>Find User 1’s Accounts</label>
        <locationX>486</locationX>
        <locationY>203</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Reassign_Accounts</targetReference>
        </connector>
        <filters>
            <field>OwnerId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>User1.Id</elementReference>
            </value>
        </filters>
        <object>Account</object>
        <outputReference>User1_Accounts</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>Rating</queriedFields>
        <queriedFields>OwnerId</queriedFields>
    </recordLookups>
    <recordLookups>
        <name>Get_User_1_s_ID</name>
        <label>Get User 1&#39;s ID</label>
        <locationX>265</locationX>
        <locationY>58</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_User_2_s_ID</targetReference>
        </connector>
        <filters>
            <field>Username</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>User1_username</elementReference>
            </value>
        </filters>
        <object>User</object>
        <outputReference>User1</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>FirstName</queriedFields>
        <queriedFields>LastName</queriedFields>
        <queriedFields>Email</queriedFields>
    </recordLookups>
    <recordLookups>
        <name>Get_User_2_s_ID</name>
        <label>Get User 2’s ID</label>
        <locationX>374</locationX>
        <locationY>57</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_User_3_s_ID</targetReference>
        </connector>
        <filters>
            <field>Username</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>User2_username</elementReference>
            </value>
        </filters>
        <object>User</object>
        <outputReference>User2</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>FirstName</queriedFields>
        <queriedFields>LastName</queriedFields>
        <queriedFields>Email</queriedFields>
    </recordLookups>
    <recordLookups>
        <name>Get_User_3_s_ID</name>
        <label>Get User 3’s ID</label>
        <locationX>481</locationX>
        <locationY>58</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Find_User_1_s_Accounts</targetReference>
        </connector>
        <filters>
            <field>Username</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>User3_username</elementReference>
            </value>
        </filters>
        <object>User</object>
        <outputReference>User3</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>FirstName</queriedFields>
        <queriedFields>LastName</queriedFields>
        <queriedFields>Email</queriedFields>
    </recordLookups>
    <recordUpdates>
        <name>update_Accounts</name>
        <label>update Accounts</label>
        <locationX>890</locationX>
        <locationY>199</locationY>
        <connector>
            <targetReference>Confirmation</targetReference>
        </connector>
        <inputReference>coll_updatedAccts</inputReference>
    </recordUpdates>
    <screens>
        <name>Collect_Usernames</name>
        <label>Collect Usernames</label>
        <locationX>156</locationX>
        <locationY>55</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>Get_User_1_s_ID</targetReference>
        </connector>
        <fields>
            <name>EnterUsernames</name>
            <fieldText>So you need to reassign some accounts?

No problem! First, we need the username of the person who&#39;s moving on to a new role.</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>User1_username</name>
            <dataType>String</dataType>
            <fieldText>User whose accounts need to be reassigned</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
        </fields>
        <fields>
            <name>other_usernames</name>
            <fieldText>Then we need the usernames of the people we want to assign the accounts to.</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>User2_username</name>
            <dataType>String</dataType>
            <fieldText>Enter username of new hot accounts owner</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
        </fields>
        <fields>
            <name>User3_username</name>
            <dataType>String</dataType>
            <fieldText>Enter username of other accounts owner</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Confirmation</name>
        <label>Confirmation</label>
        <locationX>182</locationX>
        <locationY>285</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Send_New_Account_Notification</targetReference>
        </connector>
        <fields>
            <name>ReassignMessage</name>
            <fieldText>All of {!User1.FirstName} {!User1.LastName}&#39;s accounts have been reassigned.

The Hot accounts are now owned by {!User2.FirstName} {!User2.LastName}, and the other accounts are now owned by {!User3.FirstName} {!User3.LastName}.</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <startElementReference>Collect_Usernames</startElementReference>
    <textTemplates>
        <description>Email notification to the new owners of hot, warm, and cold accounts</description>
        <name>NewAccountEmail</name>
        <text>Hello {!User2.FirstName} and {!User3.FirstName},

Your account assignments were recently updated. Please log in to Salesforce to check your new accounts. Thank you!</text>
    </textTemplates>
    <variables>
        <description>Stores an account record during one loop iteration</description>
        <name>accountLoopVar</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Account</objectType>
    </variables>
    <variables>
        <name>coll_updatedAccts</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
        <objectType>Account</objectType>
    </variables>
    <variables>
        <description>Stores the name, ID, and email address of the employee who’s moving on to the new role</description>
        <name>User1</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
        <objectType>User</objectType>
    </variables>
    <variables>
        <description>Stores the account’s ID, rating (hot, warm, or cold), and owner ID</description>
        <name>User1_Accounts</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Account</objectType>
    </variables>
    <variables>
        <description>Stores the name, ID, and email address of the employee who’s being assigned the hot accounts</description>
        <name>User2</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>User</objectType>
    </variables>
    <variables>
        <description>Stores the name, ID, and email address of the employee who’s being assigned the warm and cold accounts</description>
        <name>User3</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>User</objectType>
    </variables>
</Flow>
